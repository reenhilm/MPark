@page "/MachineEdit"
@page "/MachineEdit/{MachineId}"

@using MPark.Shared
@using MPark.Services

<div class="container border border-success mt-3">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-0 pb-0">Edit</h1>
            <p class="mt-0 pt-0">Details for @MParkMachine.Id</p>
        </div>
    </div>
@if (!Saved)
{
    <EditForm Model="@MParkMachine" OnValidSubmit="@HandleValidSubmit"
            OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary></ValidationSummary>

        <div class="row g-3 align-items-center">
            <div class="col-xs-2 col-md-1">
                <label for="country" class="col-form-label">Country</label>
            </div>
        <div class="col-lg-2 col-md-3 col-xs-6">
            <InputSelect id="country" class="form-control" @bind-Value="@CountryId">
                @foreach (var country in Countries)
                {
                            <option value="@country.Id">@country.Name</option>
                }
                </InputSelect>
            </div>
        </div>

        <div class="row g-3 align-items-center">
        <div class="col-xs-2 col-md-1">
                <label for="city" class="col-form-label">City</label>
            </div>
        <div class="col-lg-2 col-md-3 col-xs-6">
            <InputText id="city" class="form-control" @bind-Value="@MParkMachine.City" placeholder="Enter city"></InputText>
            </div>
            <div class="col-auto">
                <span id="passwordHelpInline" class="form-text">
                    Must be 8-20 characters long.
                </span>
            </div>
        </div>

        <div class="row g-3 align-items-center">
            <div class="col-xs-2 col-md-1">
            <label for="type" class="col-form-label">Type</label>
            </div>
            <div class="col-auto">
                <InputRadioGroup Name="typeRadioGroup" @bind-Value="@MParkMachine.Type">

                <br>
            @foreach (var type in (MachineType[])Enum.GetValues(typeof(MachineType)))
                {
                    <InputRadio Name="typeRadioGroup" Value="type" />
                    @type
                        <br>

                    <br>
                }
                </InputRadioGroup>
            </div>
        </div>

        <button type="submit" class="btn btn-primary edit-btn">Save machine</button>

        @if (MParkMachine.Id != new Guid())
        {
            <a class="btn btn-danger" @onclick="@DeleteMParkMachine">
                Delete
            </a>
        }

        <a class="btn btn-outline-primary" @onclick="@NavigateToOverview">Back to overview</a>
    </EditForm>
}
else
{
        <div class="alert @StatusClass">@Message</div>
}
</div>

@code {
    [Inject]
    public IMParkMachinesService MParkMachineService { get; set; }

    private string strMachineId = string.Empty;

    [Parameter]
    public string MachineId {
        get
        {
            return strMachineId;
        }
        set
        {
            strMachineId = value;
            MachineIdGuid = Guid.Parse(strMachineId);
        }
    }

    private Guid MachineIdGuid { get; set; } = new Guid();

    [Inject]
    public NavigationManager NavigationManager { get; set; }
    public MParkMachine MParkMachine { get; set; } = new MParkMachine();
    public List<Country> Countries { get; set; } = new List<Country>();

    protected string CountryId = string.Empty;

    //used to store state of screen
    protected string Message = string.Empty;
    protected string StatusClass = string.Empty;
    protected bool Saved;

    private bool isNewGuid(Guid id) => id == new Guid();

    protected override async Task OnInitializedAsync()
    {
        Saved = false;
        Countries = CountryList.GetCountries().ToList();

        if (isNewGuid(MachineIdGuid)) //new machine is being created
        {
            //add some defaults
            MParkMachine = new MParkMachine { CountryId = 1, Type = MachineType.Temperature };
        }
        else
        {
            MParkMachine = await MParkMachineService.GetByIdAsync(MachineIdGuid);
        }

        CountryId = MParkMachine.CountryId.ToString();
    }

    protected async Task HandleValidSubmit()
    {
        Saved = false;
        MParkMachine.CountryId = int.Parse(CountryId);

        if (MParkMachine.Id == new Guid()) //new
        {
            var addedMParkMachine = await MParkMachineService.PostAsync(new CreateMParkMachine()
                {
                    City = MParkMachine.City,
                    CountryId = MParkMachine.CountryId,
                    Data = MParkMachine.Data,
                    IsOnline = MParkMachine.IsOnline,
                    LastUpdated = MParkMachine.LastUpdated,
                    Type = MParkMachine.Type
                });
            if (addedMParkMachine != null)
            {
                StatusClass = "alert-success";
                Message = "New machine added successfully.";
                Saved = true;
            }
            else
            {
                StatusClass = "alert-danger";
                Message = "Something went wrong adding the new machine. Please try again.";
                Saved = false;
            }
        }
        else
        {
            await MParkMachineService.PutAsync(new UpdateMParkMachine()
                {
                    City = MParkMachine.City,
                    CountryId = MParkMachine.CountryId                    
                });
            StatusClass = "alert-success";
            Message = "MParkMachine updated successfully.";
            Saved = true;
        }
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        Message = "There are some validation errors. Please try again.";
    }

    protected async Task DeleteMParkMachine()
    {
        await MParkMachineService.DeleteAsync(MParkMachine.Id);

        StatusClass = "alert-success";
        Message = "Deleted successfully";

        Saved = true;
    }

    protected void NavigateToOverview()
    {
        NavigationManager.NavigateTo("/");
    }
}
